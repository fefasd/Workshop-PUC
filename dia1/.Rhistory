for(num_bases in largo_contigs){
acumulacion<- acumulacion + num_bases
if(acumulacion>=mitad){
print(num_contigs)
break
}
num_contigs<-num_contigs+1
}
num_contigs
num_bases
acumulacion<-0
for(N50 in largo_contigs){
acumulacion<- acumulacion + N50
if(acumulacion>=mitad){
break
}
}
N50
acumulacion<-0
L50<-1
for(N50 in largo_contigs){
acumulacion<- acumulacion + N50
if(acumulacion>=mitad){
break
}
L50<-L50+1
}
L50
#devtools::install_github("hrbrmstr/waffle")
library(waffle)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(ggthemes)
df<-read.table("ohmyGO_tograph.tsv",header = T, sep = "\t")
df<-df[c("Definitions","Counts")]
#mydata <- c(`A`=20, `B`=32, `0`=32, `AB`=16)
df2<-t(df[,c("Definitions","Counts")])
cl <- colors(distinct = TRUE)
set.seed(16001) # to set random generator seed
kolor <- sample(cl, 17)
kolorBlind<-colorblind_pal()(8)
waffle(c("organophosphate catabolic process"=8,"transition metal ion transport"=7,"multi-organism cellular process"=6,"growth"=6,"cellular biogenic amine biosynthetic process"=6,"protein maturation"=6,"indole-containing compound metabolic process"=6,"reactive oxygen species metabolic process"=5,"pyrimidine nucleobase metabolic process"=5,"carbohydrate phosphorylation"=4,"negative regulation of hydrolase activity"=4,"carbohydrate derivative transport"=4,"glutamate metabolic process"=4,"indole-containing compound biosynthetic process"=3,"protein oligomerization"=3,"regulation of cellular component movement"=3,"organophosphate ester transport"=3,"(obsolete) ATP catabolic process"=3,"response to acid chemical"=2,"hydrogen peroxide metabolic process"=2,"lipid oxidation"=2,"glycosyl compound catabolic process"=2,"positive regulation of translation"=2,"protein autophosphorylation"=2,"dicarboxylic acid transport"=2),
title = "Biological Proccess",
colors = c(kolorBlind,kolor))
waffle(c("cytoplasm"=26,"organelle"=20,"macromolecular complex"=14,"cytoplasmic part"=12,"cell periphery"=11,"non-membrane-bounded organelle"=8,"protein complex"=6,"cytosol"=3),
title = "Cellular Component",
colors = colorblind_pal()(8))
waffle(c("protein binding"=6,"nucleic acid binding transcription factor activity"=6,"transcription factor activity, sequence-specific DNA binding"=6,"peptidase activity"=6,"lyase activity"=6,"peptidase activity, acting on L-amino acid peptides"=6,"ligase activity"=6,"coenzyme binding"=6,"transferase activity, transferring one-carbon groups"=4,"methyltransferase activity"=4,"signal transducer activity"=4,"molecular transducer activity"=4,"isomerase activity"=4,"sequence-specific DNA binding"=3,"metal cluster binding"=3,"iron-sulfur cluster binding"=3,"oxidoreductase activity, acting on CH-OH group of donors"=3,"transferase activity, transferring glycosyl groups"=3,"guanyl nucleotide binding"=3,"hydrolase activity, acting on glycosyl bonds"=3,"hydrolase activity, acting on carbon-nitrogen (but not peptide) bonds"=3,"magnesium ion binding"=2,"GTP binding"=2,"iron ion binding"=2,"tetrapyrrole binding"=2),
title = "Molecular Function",
colors = c(kolorBlind,kolor))
######### PIE GRAPHICS
df<-data.frame(group=c("male","female","child"),value=c(10,10,30))
bp<- ggplot(df, aes(x="", y=value, fill=group)) + geom_bar(width = 1, stat = "identity")
bp
pie <- bp + coord_polar("y", start=0)
pie + theme_minimal()
#change colors
cl <- colors(distinct = TRUE)
set.seed(15887) # to set random generator seed
kolor <- sample(cl, 53)
pie + scale_fill_manual(values=kolor)  + theme_minimal()
#dark default colors
pie + scale_fill_brewer(palette="Dark2")
#antartic colors and no background
pie + scale_fill_brewer(palette="Blues") + theme_minimal()
############ BARPLOTS
##biological procces
#abajo,izquierda arriba, derecha
par(mar=c(20,2,2,2))
barplot( c(8,7,6,6,6,6,6,5,5,4,4,4,4,3,3,3,3,3,2,2,2,2,2,2,2),
density=c(8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8)*2,
#angle=c(1,2,3,4,50,60,70,80,90,100,110,120,130,140,150,160,170,180,19,20,21,22,23,24,25)*-8,
col="black", names.arg = c("organophosphate catabolic process",
"transition metal ion transport",
"multi-organism cellular process",
"growth",
"cellular biogenic amine biosynthetic process",
"protein maturation",
"indole-containing compound metabolic process",
"reactive oxygen species metabolic process",
"pyrimidine nucleobase metabolic process",
"carbohydrate phosphorylation",
"negative regulation of hydrolase activity",
"carbohydrate derivative transport",
"glutamate metabolic process",
"indole-containing compound biosynthetic process",
"protein oligomerization",
"regulation of cellular component movement",
"organophosphate ester transport",
"(obsolete) ATP catabolic process",
"response to acid chemical",
"hydrogen peroxide metabolic process",
"lipid oxidation",
"glycosyl compound catabolic process",
"positive regulation of translation",
"protein autophosphorylation",
"dicarboxylic acid transport"
),main = "Biological Proccess",las=2)
df2
View(df)
df
viewer <- getOption("viewer")
viewer
x<-1
x
x +1
x<- x +1
x
source("https://bioconductor.org/biocLite.R")
biocLite(SeqinR)
source("https://bioconductor.org/biocLite.R")
biocLite("SeqinR")
biocLite("SeqinR")
biocLite("SeqinR")
biocLite("seqinr")
library(seqinr)
x<-"hola"
x
x <- x + 1
x <- x + "hola"
x
x<-x" como estas?"
x x
xx
log(10)
library(phyloseq)
library(ggplot2)
setwd("~/Desktop/Workshop-PUC/dia1")
df<-read.csv("taxcount.csv",header = T,check.names = F) #read the main table
df
df<-read.csv("taxcount.csv",header = T,check.names = F) #read the main table
metad<-read.table("metadata.txt",header = T,row.names = 1,sep = "\t",check.names = F)#read the metadata
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
metad<-read.table("metadata.txt",header = T,row.names = 1,sep = "\t",check.names = F)#read the metadata
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
otu<-otu_table(as.matrix(df[,c(9:ncol(df))]),taxa_are_rows = T)#get cols that have the values
phyob<-phyloseq(otu, tax,metad)#finally make phyloseq object
plot_richness(phyob_all,
measures = c("Observed","Chao1","Shannon","InvSimpson"),
color = "Laguna")
plot_richness(phyob,
measures = c("Observed","Chao1","Shannon","InvSimpson"),
color = "Laguna")
phyob<-phyloseq(otu, tax,metad)#finally make phyloseq object
plot_richness(phyob,
measures = c("Observed","Chao1","Shannon","InvSimpson"),
color = "Laguna")
plot_richness(phyob,
measures = c("Observed","Chao1","Shannon","InvSimpson"),
color = "host_disease")
df<-read.csv("taxcount.csv",header = T,check.names = F) #read the main table
metad<-read.table("metadata.txt",header = T,row.names = 1,sep = "\t",check.names = F)#read the metadata
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
otu<-otu_table(as.matrix(df[,c(9:ncol(df))]),taxa_are_rows = T)#get cols that have the values
phyob<-phyloseq(otu, tax,metad)#finally make phyloseq object
plot_richness(phyob,
measures = c("Observed","Chao1","Shannon","InvSimpson"),
color = "host_disease")
df<-read.csv("taxcount.csv",header = T,check.names = F) #read the main table
metad<-read.table("metadata.txt",header = T,row.names = 1,sep = "\t",check.names = F)#read the metadata
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
otu<-otu_table(as.matrix(df[,c(9:ncol(df))]),taxa_are_rows = T)#get cols that have the values
phyob<-phyloseq(otu, tax,metad)#finally make phyloseq object
plot_richness(phyob,
measures = c("Observed","Chao1","Shannon","InvSimpson"),
color = "host_disease")
df<-read.csv("taxcount.csv",header = T,check.names = F) #read the main table
View(df)
df<-read.csv("taxcount.csv",header = T,check.names = F) #read the main table
metad<-read.table("metadata.txt",header = T,row.names = 1,sep = "\t",check.names = F)#read the metadata
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
otu<-otu_table(as.matrix(df[,c(9:ncol(df))]),taxa_are_rows = T)#get cols that have the values
phyob<-phyloseq(otu, tax,metad)#finally make phyloseq object
plot_richness(phyob,
measures = c("Observed","Chao1","Shannon","InvSimpson"),
color = "host_disease")
plot_richness(phyob,
measures = c("Observed","Chao1","Shannon","Simpson"),
color = "host_disease")
phydist<-distance(phyob,"jaccard")
phyord<-ordinate(phyob, "MDS", distance = phydist)
plot_ordination(phyob_all, phyord, type = "sample",color = "Laguna") +
geom_point(size=5) +
theme(plot.title = element_text(colour = "darkred",size=15,face = "bold"),
axis.title.x = element_text(colour = "darkred", size=15,face = "bold"),
axis.title.y = element_text(colour = "darkred", size=15,face = "bold"),
legend.title = element_text(colour = "darkred", size=15,face = "bold"))
phydist<-distance(phyob,"jaccard")
phyord<-ordinate(phyob, "MDS", distance = phydist)
plot_ordination(phyob, phyord, type = "sample",color = "Laguna") +
geom_point(size=5) +
theme(plot.title = element_text(colour = "darkred",size=15,face = "bold"),
axis.title.x = element_text(colour = "darkred", size=15,face = "bold"),
axis.title.y = element_text(colour = "darkred", size=15,face = "bold"),
legend.title = element_text(colour = "darkred", size=15,face = "bold"))
plot_ordination(phyob, phyord, type = "sample",color = "host_disease") +
geom_point(size=5) +
theme(plot.title = element_text(colour = "darkred",size=15,face = "bold"),
axis.title.x = element_text(colour = "darkred", size=15,face = "bold"),
axis.title.y = element_text(colour = "darkred", size=15,face = "bold"),
legend.title = element_text(colour = "darkred", size=15,face = "bold"))
df<-read.csv("taxcount.csv",header = T) #read the main table
metad<-read.table("metadata.txt",header = T,row.names = 1,sep = "\t",check.names = F)#read the metadata
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
otu<-otu_table(as.matrix(df[,c(9:ncol(df))]),taxa_are_rows = T)#get cols that have the values
phyob<-phyloseq(otu, tax,metad)#finally make phyloseq object
phyob
head(df)
head(df)
df<-read.csv("taxcount.csv",header = T) #read the main table
head(df)
df<-read.csv("taxcount.csv",header = T) #read the main table
head(df)
head(df)
df<-read.csv(file.choose(),header = T) #read the main table
summary(df)
nrow(df)
ncol(df)
df<-read.csv(file.choose(),header = T) #read the main table
df<-read.csv(file.choose(),header = T) #read the main table
head(df)
nrow(df)
summary(df)
str(df)
tail(df)
tail(df)
names(df)
barplot(df)
barplot(margin.table(df,1))
plot(df)
hist(df$Phylum)
hist(df$SRR1528344)
hist(df$Phylum)
hist(df)
plot(df$Phylum)
df[2,]
df>1
names(df)
df[8:21]>1
ncol(df)
df[,8:21]>1
df[df[,8:21]>1]
df[df[,8:21]>1,]
df[,8:21]>1
df[8:21]
df[df[,8:21]>1,]
index <- df[,8:21]>1
head(df[index,])
head(df[index,])
head(df[index,])
ggplot(head(df[index,]),aes(Phylum))
ggplot(df[index,],aes(Phylum))
ggplot(df[index,])
ggplot(df[index,]) + geom_bar(aes(Phylum))
ggplot(df[index,]) + geom_bar(aes(x=Phylum,color=Phylum))
ggplot(df[index,]) + geom_bar(aes(x=Phylum,fill=Phylum))
df[index,]
ggplot(df[index,]) + geom_bar(aes(x=Phylum))
df[index,]
ggplot(df[index,]) + geom_bar(aes(x=Phylum))
ggplot(df[index,]) + geom_hist(aes(x=Phylum))
ggplot(df[index,]) + geom_histogram(aes(x=Phylum))
ggplot(df[index,]) + geom_histogram(aes(x=count(Phylum)))
ggplot(df[index,]) + geom_boxplot(aes(x=Phylum))
ggplot(df[index,]) + geom_boxplot(aes(x=Phylum,Species))
ggplot(df[index,]) + geom_boxplot(aes(x=Phylum,Class))
ggplot(df[index,]) + geom_boxplot(aes(x=Phylum))
ggplot(df[index,]) + geom_boxplot(aes(x=Phylum,fill=Phylum))
plot(df[index,])
hist(df[index,])
hist(df[index,8])
hist(df[index,8:21])
hist(df[index,8:20])
hist(df[index,9])
hist(df[index,21])
heatmap(df[index,])
ggplot(df[index,]) + geom_count()
ggplot(df[index,]) + geom_count(aes(Phylum))
ggplot(df[index,]) + geom_count(aes(Phylum,Class))
ggplot(df[index,]) + geom_count(aes(Phylum,SRR1528462))
df==0
df[is.na(df)]<-0
ggplot(df[index,]) + geom_count(aes(Phylum,SRR1528462))
df[is.na(df)]
is.na(df)
ggplot(df[index,]) + geom_count(aes(Phylum,Class))
ggplot(df[index,]) + geom_bar(aes(Phylum,Class))
ggplot(df[index,]) + geom_bar(aes(Phylum))
ggplot(df[index,]) + geom_bar(aes(Phylum,fill=Phylum))
ggplot(df[index,]) + geom_bar(aes(Phylum,fill=Phylum), stat="identity")
ggplot(df[index,]) + geom_bar(aes(Phylum,Class,fill=Phylum), stat="identity")
ggplot(df[index,]) + geom_bar(aes(Phylum,fill=Phylum), stat="identity")
ggplot(df[index,]) + geom_bar(aes(Phylum,fill=Phylum))
df[is.na(df[index,])]<-0
df[index,]
is.na(df[index,])
df[is.na(df[index,]),]<-0
ggplot(df[index,] & is.na(df)) + geom_bar(aes(Phylum,fill=Phylum))
ggplot(df[index,] & is.na(df)==F) + geom_bar(aes(Phylum,fill=Phylum))
df[is.na(df[index,]),]
df[is.na(df[index,]),]<-0
df[is.na(df[index,])]<-0
df[is.na(df[index,])]
df<-read.csv(file.choose(),header = T) #read the main table
head(df)
nrow(df)
ncol(df)
tail(df)
names(df)
index <- df[,8:21]>1
df<-df[index,]
is.na(df)
df[is.na(df)]
df[is.na(df)]<-0
df
ggplot(df) + geom_bar(aes(Phylum,fill=Phylum))
ggplot(data=subset(df, !is.na(df))) + geom_bar(aes(Phylum,fill=Phylum))
ggplot(data=subset(df, is.na(df))) + geom_bar(aes(Phylum,fill=Phylum))
ggplot(data=subset(df, !is.na(df))) + geom_bar(aes(Phylum,fill=Phylum))
df
metad<-read.csv("metadata.csv",header = T,row.names = 1)#read the metadata
metad
metad
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
otu<-otu_table(as.matrix(df[,c(9:ncol(df))]),taxa_are_rows = T)#get cols that have the values
phyob<-phyloseq(otu, tax,metad)#finally make phyloseq object
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
tax
df
df<-read.csv(file.choose(),header = T,check.names = F) #read the main table
head(df)
nrow(df)
ncol(df)
tail(df)
names(df)
index <- df[,8:21]>1
df<-df[index,]
metad<-read.csv("metadata.csv",header = T,row.names = 1,check.names = F)#read the metadata
tax<-tax_table(as.matrix(df[,c(1:7)]))#get cols that only have taxa names
tax
df[,1:7]
df
View(df)
df<-read.csv(file.choose(),header = T) #read the main table
head(df)
nrow(df)
ncol(df)
tail(df)
names(df)
index <- df[,8:21]>1
View(df)
df[index,]
df2<-df[index,]
index <- df[,c(8:21)]>1
df2<-df[index,]
df[,c(8:21)]
df[,c(8:21)]>1
index <- df[,c(8:21)]>1
df2<-df[index,]
View(df2)
ggplot(df) +geom_bar(aes(Phylum,fill=Phylum))
df>1
index <- df>1
df2<-df[index,]
index
df2<-df[index]
df2<-df[index]
df2
df
df>1
ncol(df)
c(8:21)
df[,c(8:21)]>1
index <- df[,c(8:21)]>1
df2<-df[index]
df2<-df[index,]
View(df2)
df[,"c(8:21)"]
df[,8]
index <- df[,8]>1
df2<-df[index,]
View(df2)
df[,8:21]
sum(df[,8:21])>1
colSums(df[,8:21])
index <- colSums(df[,8:21])>1
colSums(df[,8:21])>1
rowSums(df[,8:21])>1
index <- rowSums(df[,8:21])>1
df2<-df[index,]
View(df2)
df<-df[index,]
metad<-read.csv("metadata.csv",header = T,row.names = 1)#read the metadata
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,1:7]))#get cols that only have taxa names
tax
ncol(df)
otu<-otu_table(as.matrix(df[,c(8:ncol(df))]),taxa_are_rows = T)#get cols that have the values
otu
metad<-read.csv("metadata.csv",header = T,row.names = 1)#read the metadata
metad<-sample_data(metad)#convert table into sample data (for phyloseq object)
tax<-tax_table(as.matrix(df[,1:7]))#get cols that only have taxa names
otu<-otu_table(as.matrix(df[,c(8:ncol(df))]),taxa_are_rows = T)#get cols that have the values
phyob<-phyloseq(otu, tax,metad)#finally make phyloseq object
plot_bar(physeq, fill = "Family")
plot_bar(phyob, fill = "Family")
plot_bar(phyob, fill = "Phylum")
plot_richness(phyob, x="Phylum", color="host_disease")
plot_richness(phyob, x="host_disease", color="host_disease")
plot_richness(phyob, x="host_disease", color="Phylum")
plot_richness(phyob, x="host_disease", color="Sample")
metad
plot_richness(phyob, x="host_disease", color="id")
plot_richness(phyob, x="id", color="host_disease")
plot_bar(phyob, fill = "Phylum", facet_grid = ~host_disease)
plot_bar(phyob, fill = "Phylum", facet_grid =~host_disease)
plot_bar(phyob, "Phylum",fill = "Phylum", facet_grid =~host_disease)
plot_bar(x = phyob, y = "Phylum",fill = "Phylum", facet_grid =~host_disease)
physeq.ord <- ordinate(phyob, method = "MDS", distance = "bray")
plot_ordination(phyob, physeq.ord, type = "biplot", color = colors, shape = shapes)
plot_ordination(phyob, physeq.ord, type = "biplot", shape = Phylum)
plot_ordination(phyob, physeq.ord, type = "biplot", color="host_disease")
ig<-make_network(phyob, distance="jaccard", type = "taxa", max.dist=0.3, weighted=TRUE) #max.dist=0.4 default
pnt<-plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "host_disease")
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "host_disease")
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
ig<-make_network(phyob, distance="jaccard", type = "taxa", max.dist=0.2, weighted=TRUE) #max.dist=0.4 default
options(warn = -1)
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
options(warn = 0)
ig<-make_network(phyob, distance="jaccard", type = "taxa", max.dist=0.5, weighted=TRUE) #max.dist=0.4 default
options(warn = -1)
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
options(warn = 0)
ig<-make_network(phyob, distance="jaccard", type = "taxa", max.dist=0.4, weighted=TRUE) #max.dist=0.4 default
options(warn = -1)
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Class")
options(warn = 0)
plot_ordination(phyob, phyord, type = "sample",color = "Laguna") +
geom_point(size=5) +
theme(plot.title = element_text(colour = "darkred",size=15,face = "bold"),
axis.title.x = element_text(colour = "darkred", size=15,face = "bold"),
axis.title.y = element_text(colour = "darkred", size=15,face = "bold"),
legend.title = element_text(colour = "darkred", size=15,face = "bold"))
phydist<-distance(phyob,"jaccard")
phyord<-ordinate(phyob, "MDS", distance = phydist)
plot_ordination(phyob, phyord, type = "sample",color = "Laguna") +
geom_point(size=5) +
theme(plot.title = element_text(colour = "darkred",size=15,face = "bold"),
axis.title.x = element_text(colour = "darkred", size=15,face = "bold"),
axis.title.y = element_text(colour = "darkred", size=15,face = "bold"),
legend.title = element_text(colour = "darkred", size=15,face = "bold"))
plot_ordination(phyob, phyord, type = "sample",color = "host_disease") +
geom_point(size=5) +
theme(plot.title = element_text(colour = "darkred",size=15,face = "bold"),
axis.title.x = element_text(colour = "darkred", size=15,face = "bold"),
axis.title.y = element_text(colour = "darkred", size=15,face = "bold"),
legend.title = element_text(colour = "darkred", size=15,face = "bold"))
plot_bar(phyob, "Class",fill = "Class", facet_grid =~host_disease)
plot_bar(phyob, "Genus",fill = "Genus", facet_grid =~host_disease)
plot_ordination(phyob, phyord, type = "sample",color = "host_disease")
plot_ordination(phyob, phyord, type = "sample",color = "host_disease", size=5)
sample_data(phyob)$host_disease <- relevel(sample_data(phyob)$host_disease, "healthy")
diagdds = phyloseq_to_deseq2(phyob, ~ host_disease)#focus the test on host_disease (metadata file)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
res = results(diagdds, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyob)[rownames(sigtab), ], "matrix"))
res = results(diagdds, cooksCutoff = FALSE)
diagdds = phyloseq_to_deseq2(phyob, ~ host_disease)#focus the test on host_disease (metadata file)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
library(DESeq2)
diagdds = phyloseq_to_deseq2(phyob, ~ host_disease)#focus the test on host_disease (metadata file)
diagdds = DESeq(diagdds, test="Wald", fitType="parametric")
res = results(diagdds, cooksCutoff = FALSE)
alpha = 0.01
sigtab = res[which(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(phyob)[rownames(sigtab), ], "matrix"))
head(sigtab)
x = tapply(sigtab$log2FoldChange, sigtab$Phylum, function(x) max(x))
x = sort(x, TRUE)
sigtab$Phylum = factor(as.character(sigtab$Phylum), levels=names(x))
x = tapply(sigtab$log2FoldChange, sigtab$Species, function(x) max(x))
x = sort(x, TRUE)
sigtab$Species = factor(as.character(sigtab$Species), levels=names(x))
ggplot(sigtab, aes(x=Species, y=log2FoldChange, color=Phylum)) + geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ig<-make_network(phyob, distance="jaccard", type = "taxa", max.dist=0.4, weighted=TRUE) #max.dist=0.4 default
options(warn = -1)
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
options(warn = 0)
ig<-make_network(phyob, distance="jaccard") #max.dist=0.4 default
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
ig<-make_network(phyob, distance="jaccard", weighted=TRUE) #max.dist=0.4 default
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
ig<-make_network(phyob, distance="jaccard", type = "taxa", max.dist=0.4, weighted=TRUE) #max.dist=0.4 default
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
ig<-make_network(phyob, distance="jaccard", type = "taxa") #max.dist=0.4 default
plot_network(ig, phyob, line_weight=0.4, type = "taxa", color = "Phylum")
plot_network(ig, phyob, color = "Phylum")
plot_network(ig, phyob, =0.4, type = "taxa", color = "Phylum")
plot_network(ig, phyob, type = "taxa", color = "Phylum")
